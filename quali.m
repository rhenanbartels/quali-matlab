function quali()
    mainInterface = startMainInterface();
end

function mainFig = startMainInterface()
    % Make program full screen
    screenSize = get(0, 'ScreenSize');
    mainInterfaceColor = [0, 0, 0];
    
   mainFig = figure('Position', screenSize,...
        'MenuBar', 'none',...
        'NumberTitle', 'off',...
        'Name', ['Qualitative Analysis of Lung Images - 0.0.0dev0 -'...
                 ' Matlab Version'],...
        'Color', mainInterfaceColor,...
        'Resize', 'On',...
        'WindowButtonMotionFcn', @mouseMove,...
        'WindowScrollWheelFcn', @refreshSlicePosition);
    
   sidePanel = uipanel('Parent', mainFig,...
       'Units', 'Normalized',...
       'Position', [0, 0, 0.25, 1],...
       'Backgroundcolor', [0.1, 0.1, 0.1]);
   
   imageOptionsPanel = uipanel('Parent', sidePanel,...
       'Units', 'Normalized',...
       'Position', [0, 0.45, 1, 0.55],...
       'FontSize',14,...
       'FontWeight','Bold',...
       'Backgroundcolor', [0.1, 0.1, 0.1],...
       'Foregroundcolor', [1, 1, 1],...
       'Title', 'Image Options');
         
   createImageOptionsWidgets(imageOptionsPanel, [0.1, 0.1, 0.1]);   
   
   metadataPanel = uipanel('Parent', sidePanel,...
       'Units', 'Normalized',...
       'Position', [0, 0.0, 1, 0.45],...
       'FontSize',14,...
       'FontWeight','Bold',...
       'Backgroundcolor', [0.1, 0.1, 0.1],...
       'Foregroundcolor', [1, 1, 1],...
       'Title', 'Metadata');
   
   startAxesMetadataInfo(metadataPanel, [0.1, 0.1, 0.1]);
   
   uicontrol('Parent', mainFig,...
       'Units', 'Normalized',...
       'Position', [0.6, 0.005, 0.06, 0.03],...
       'Style', 'Text',...
       'Foregroundcolor', [1, 1, 1],...
       'Backgroundcolor', mainInterfaceColor,...
       'Fontsize', 13,...
       'Horizontalalignment', 'Center',...
       'String', '',...
       'Tag', 'textSliceNumber');
   
   uicontrol('Parent', mainFig,...
       'Units', 'Normalized',...
       'Position', [0.25, 0.005, 0.1, 0.03],...
       'Style', 'Text',...
       'Foregroundcolor', [1, 1, 1],...
       'Backgroundcolor', mainInterfaceColor,...
       'Fontsize', 13,...
       'HorizontalAlignment', 'Center',...
       'String', 'WW / WL:', ...
       'Visible', 'Off',...
       'Tag', 'textWindowWL')
   
   
   statusPanel = uipanel('Parent', sidePanel,...
       'Units', 'Normalized',...
       'Position', [0, 0.0, 1, 0.04],...
       'FontSize',14,...
       'FontWeight','Bold',...
       'Backgroundcolor', [0.1, 0.1, 0.1],...
       'Foregroundcolor', [1, 1, 1]');
   
   uicontrol('Parent', statusPanel,...
       'Units', 'Normalized',...
       'Position', [0.05, 0.05, 0.9, 0.8],...
       'Style', 'Text',...
       'Foregroundcolor', [1, 1, 1],...
       'Backgroundcolor', [0.1, 0.1, 0.1],...
       'Fontsize', 13,...
       'Horizontalalignment', 'Center',...
       'String', 'Ready!',...
       'Tag', 'statusText');
    
      uicontrol('Parent', statusPanel,...
       'Units', 'Normalized',...
       'Position', [0.05, 0.4, 0.05, 0.2],...
       'Style', 'Text',...
       'Fontsize', 13,...
       'Backgroundcolor', 'g',...
       'String', '',...
       'Tag', 'statusLight');
   
%   informationAxes = axes('Parent', mainFig,...
%       'Units', 'Normalized',...
%       'Position', [0, 0.06, 1, 0.85],...
%       'Color', [0, 0, 0],...
%       'XTickLabel', [],...
%       'YTickLabel', [],...
%       'Xcolor', [0, 0, 0],...
%       'Ycolor', [0, 0, 0],...
%       'Tag', 'informationAxes');
  
  imageAxes = axes('Parent', mainFig,...
        'Units', 'Normalized',...
        'Position', [0.2750    0.1300    0.700    0.7800],...
        'Color', [0, 0, 0],...
        'XTickLabel', [],...
        'YTickLabel', [],...
        'Xcolor', [0, 0, 0],...
        'Ycolor', [0, 0, 0],...
        'Tag', 'imageAxes');
    
    mainMenu = uimenu('parent', mainFig,...
        'Label', 'File');
    importMenu = uimenu('Parent', mainMenu,...
        'Label', 'Import');
    
    uimenu('Parent', importMenu,...
        'Label', 'Dicom',...
        'Callback', @openImage);
    
    uimenu('Parent', importMenu,...
        'Label', 'Mask',...
        'Tag', 'importMaskButton',...
        'Callback', @openMask);

    uicontrol('Parent', mainFig,...
        'Style', 'slider',...
        'Units', 'Normalized',...
        'Visible', 'Off',...
        'Backgroundcolor', [0, 0, 0],...
        'Min',1,...
        'Max',1,...
        'Value', 1,...
        'Position', [0.38    0.01    0.50    0.10],...
        'Callback', @moveSlider,...
        'Tag', 'slider');
    
    %Start data handles
    handles.data = '';
    
    handles.gui = guihandles(mainFig);
    guidata(mainFig, handles);
end

function createImageOptionsWidgets(imageOptionsPanel, bckColor)    

    % Window Width
    uicontrol('Parent', imageOptionsPanel,...
        'Units', 'Normalized',...
        'Position', [0.05, 0.9, 0.35, 0.05],...
        'Style', 'Text',...
        'String', 'Window Width:',...
        'Fontsize', 14,....
        'Fontweight', 'bold',...
        'Horizontalalignment', 'Left',...
        'BackGroundColor', bckColor,...
        'ForeGroundColor', [1, 1, 1])
    
     uicontrol('Parent', imageOptionsPanel,...
        'Units', 'Normalized',...
        'Position', [0.42, 0.885, 0.35, 0.05],...
        'Style', 'Slider',...
        'BackGroundColor', bckColor,...
        'ForeGroundColor', [1, 1, 1],...
        'Tag', 'windowWidthSlider')
    
     uicontrol('Parent', imageOptionsPanel,...
        'Units', 'Normalized',...
        'Position', [0.8, 0.89, 0.15, 0.05],...
        'Style', 'Edit',...
        'String', '1000',...
        'Fontsize', 14,....
        'Fontweight', 'bold',...
        'Horizontalalignment', 'Center',...
        'BackGroundColor', [0.2, 0.2, 0.2],...
        'ForeGroundColor', [1, 1, 1],...
        'Tag', 'editWindowWidth')
    
     % Window Level
     uicontrol('Parent', imageOptionsPanel,...
        'Units', 'Normalized',...
        'Position', [0.05, 0.83, 0.37, 0.05],...
        'Style', 'Text',...
        'String', 'Window Level:',...
        'Fontsize', 14,....
        'Fontweight', 'bold',...
        'Horizontalalignment', 'Left',...
        'BackGroundColor', bckColor,...
        'ForeGroundColor', [1, 1, 1])
    
     uicontrol('Parent', imageOptionsPanel,...
        'Units', 'Normalized',...
        'Position', [0.42, 0.82, 0.35, 0.05],...
        'Style', 'Slider',...
        'BackGroundColor', bckColor,...
        'ForeGroundColor', [1, 1, 1],...
        'Tag', 'windowLevelSlider')
    
     uicontrol('Parent', imageOptionsPanel,...
        'Units', 'Normalized',...
        'Position', [0.8, 0.83, 0.15, 0.05],...
        'Style', 'Edit',...
        'String', '1000',...
        'Fontsize', 14,....
        'Fontweight', 'bold',...
        'Horizontalalignment', 'Center',...
        'BackGroundColor', [0.2, 0.2, 0.2],...
        'ForeGroundColor', [1, 1, 1],...
        'Tag', 'editWindowLevel')    
    
    % Flip Image
     uicontrol('Parent', imageOptionsPanel,...
        'Units', 'Normalized',...
        'Position', [0.1, 0.7, 0.35, 0.05],...
        'Style', 'Text',...
        'String', 'Flip Image:',...
        'Fontsize', 14,....
        'Fontweight', 'bold',...
        'Horizontalalignment', 'Left',...
        'BackGroundColor', bckColor,...
        'ForeGroundColor', [1, 1, 1])
    
    uicontrol('Parent', imageOptionsPanel,...
        'Units', 'Normalized',...
        'Position', [0.35, 0.7, 0.25, 0.05],...
        'Style', 'Popupmenu',...
        'String', {'z', 'x', 'y'},...
        'Fontsize', 14,....
        'Fontweight', 'bold',...
        'Tag', 'popFlipImage')
    
    uicontrol('Parent', imageOptionsPanel,...
        'Units', 'Normalized',...
        'Position', [0.6, 0.69, 0.25, 0.06],...
        'Style', 'Pushbutton',...
        'String', 'Flip',...
        'Fontsize', 14,....
        'Fontweight', 'bold',...
        'Tag', 'buttonFlipImage',...
        'Enable', 'Off',...
        'Callback', {@flipImageOrMask, 'image'}) 
    
    % Flip Mask
    uicontrol('Parent', imageOptionsPanel,...
        'Units', 'Normalized',...
        'Position', [0.1, 0.6, 0.35, 0.05],...
        'Style', 'Text',...
        'String', 'Flip Mask:',...
        'Fontsize', 14,....
        'Fontweight', 'bold',...
        'Horizontalalignment', 'Left',...
        'BackGroundColor', bckColor,...
        'ForeGroundColor', [1, 1, 1])
    
    uicontrol('Parent', imageOptionsPanel,...
        'Units', 'Normalized',...
        'Position', [0.35, 0.6, 0.25, 0.05],...
        'Style', 'Popupmenu',...
        'String', {'z', 'x', 'y'},...
        'Fontsize', 14,....
        'Fontweight', 'bold',...
        'Tag', 'popFlipMask')
    
    uicontrol('Parent', imageOptionsPanel,...
        'Units', 'Normalized',...
        'Position', [0.6, 0.59, 0.25, 0.06],...
        'Style', 'Pushbutton',...
        'String', 'Flip',...
        'Fontsize', 14,....
        'Fontweight', 'bold',...
        'Tag', 'buttonFlipMask',...
        'Enable', 'Off',...
        'Callback', {@flipImageOrMask, 'mask'})  
    
    uicontrol('Parent', imageOptionsPanel,...
        'Units', 'Normalized',...
        'Position', [0.05, 0.45, 0.26, 0.05],...
        'Style', 'Text',...
        'String', 'Orientation:',...
        'Horizontalalignment', 'Left',...
        'Fontsize', 14,....
        'Backgroundcolor', bckColor,...
        'Foregroundcolor', [1, 1, 1],...
        'Fontweight', 'bold')
    
    orientationGroup = uibuttongroup('Parent', imageOptionsPanel,...
        'Units', 'Normalized',...
        'Position', [0.32, 0.39, 0.5, 0.15],...
        'Bordertype', 'None',...
        'Backgroundcolor', bckColor,...
        'Tag', 'orientationGroup');
    
    uicontrol('Parent', orientationGroup,...
        'Units', 'Normalized',...
        'Position', [0.05, 0.7, 0.9, 0.3],...
        'Style', 'Radio',...
        'String', 'Transversal',...
        'Fontsize', 14,...
        'Backgroundcolor', bckColor,...
        'Foregroundcolor', [1, 1, 1],...
        'Value', 1);
    
    uicontrol('Parent', orientationGroup,...
        'Units', 'Normalized',...
        'Position', [0.05, 0.35, 0.9, 0.3],...
        'Style', 'Radio',...
        'String', 'Sagittal',...
        'Fontsize', 14,...
        'Backgroundcolor', bckColor,...
        'Foregroundcolor', [1, 1, 1],...
        'Value', 0);
       
     uicontrol('Parent', orientationGroup,...
        'Units', 'Normalized',...
        'Position', [0.05, 0.0, 0.9, 0.3],...
        'Style', 'Radio',...
        'String', 'Coronal',...
        'Fontsize', 14,...
        'Backgroundcolor', bckColor,...
        'Foregroundcolor', [1, 1, 1],...
        'Value', 0);
         
     uicontrol('Parent', imageOptionsPanel,...
        'Units', 'Normalized',...
        'Position', [0.05, 0.3, 0.35, 0.05],...
        'Style', 'Text',...
        'String', 'Mask Settings:',...
        'Fontsize', 14,....
        'Fontweight', 'bold',...
        'Horizontalalignment', 'Left',...
        'BackGroundColor', bckColor,...
        'ForeGroundColor', [1, 1, 1])
    
     uicontrol('Parent', imageOptionsPanel,...
        'Units', 'Normalized',...
        'Position', [0.41, 0.285, 0.07, 0.06],...
        'Style', 'Pushbutton',...
        'String', '',...
        'Fontsize', 14,....
        'Fontweight', 'bold',...
        'Horizontalalignment', 'Left',...
        'BackGroundColor', bckColor,...
        'ForeGroundColor', [1, 1, 1],...
        'Tag', 'buttonMaskSettings')
        
    uicontrol('Parent', imageOptionsPanel,...
        'Units', 'Normalized',...
        'Position', [0.05, 0.03, 0.55, 0.05],...
        'Style', 'Check',...
        'String', 'Show Mask Overlay',...
        'Fontsize', 14,....
        'Fontweight', 'bold',...
        'BackGroundColor', bckColor,...
        'ForeGroundColor', [1, 1, 1],...
        'Tag', 'showMaskCheck',...
        'Enable', 'Off',...
        'Callback', @showMask)
        
end


function startAxesMetadataInfo(metadataPanel, bckColor)
    uicontrol('Parent', metadataPanel,...
        'Style', 'Text',...
        'Units', 'Normalized',...
        'Position', [0.05, 0.9, 0.35, 0.1],...        
        'BackgroundColor', bckColor,...
        'Foregroundcolor', [1, 1, 1]',...
        'HorizontalAlignment', 'Left',...
        'FontSize', 14,...
        'Fontweight', 'Bold',...
        'String', 'Patient Name:');
    
     uicontrol('Parent', metadataPanel,...
        'Style', 'Text',...
        'Units', 'Normalized',...
        'Position', [0.37, 0.9, 0.85, 0.1],...        
        'BackgroundColor', bckColor,...
        'Foregroundcolor', [1, 1, 1]',...
        'HorizontalAlignment', 'Left',...
        'FontSize', 14,...
        'String', '',...
        'Tag', 'textPatientName');
    
    uicontrol('Parent', metadataPanel,...
        'Style', 'Text',...
        'Units', 'Normalized',...
        'Position', [0.05, 0.82, 0.12, 0.1],...        
        'BackgroundColor', bckColor,...
        'Foregroundcolor', [1, 1, 1]',...
        'HorizontalAlignment', 'Left',...
        'FontSize', 14,...
        'Fontweight', 'Bold',...
        'String', 'Age:');
    
     uicontrol('Parent', metadataPanel,...
        'Style', 'Text',...
        'Units', 'Normalized',...
        'Position', [0.19, 0.82, 0.20, 0.1],...        
        'BackgroundColor', bckColor,...
        'Foregroundcolor', [1, 1, 1]',...
        'HorizontalAlignment', 'Left',...
        'FontSize', 14,...
        'String', '',...
        'Tag', 'textAge');
 
    
        uicontrol('Parent', metadataPanel,...
        'Style', 'Text',...
        'Units', 'Normalized',...
        'Position', [0.05, 0.74, 0.35, 0.1],...        
        'BackgroundColor', bckColor,...
        'Foregroundcolor', [1, 1, 1]',...
        'HorizontalAlignment', 'Left',...
        'FontSize', 14,...
        'Fontweight', 'Bold',...
        'String', 'Study Descr:');
    
     uicontrol('Parent', metadataPanel,...
        'Style', 'Text',...
        'Units', 'Normalized',...
        'Position', [0.34, 0.74, 0.85, 0.1],...        
        'BackgroundColor', bckColor,...
        'Foregroundcolor', [1, 1, 1]',...
        'HorizontalAlignment', 'Left',...
        'FontSize', 14,...
        'String', '',...
        'Tag', 'textStudyDescription');
    
    uicontrol('Parent', metadataPanel,...
        'Style', 'Text',...
        'Units', 'Normalized',...
        'Position', [0.05, 0.66, 0.35, 0.1],...
        'BackgroundColor', bckColor,...
        'Foregroundcolor', [1, 1, 1]',...
        'HorizontalAlignment', 'Left',...
        'FontSize', 14,...
        'Fontweight', 'Bold',...
        'String', 'Series Descr:');
    
     uicontrol('Parent', metadataPanel,...
        'Style', 'Text',...
        'Units', 'Normalized',...
        'Position', [0.35, 0.66, 0.85, 0.1],...        
        'BackgroundColor', bckColor,...
        'Foregroundcolor', [1, 1, 1]',...
        'HorizontalAlignment', 'Left',...
        'FontSize', 14,...
        'String', '',...
        'Tag', 'textSeriesDescription');
 
    
    uicontrol('Parent', metadataPanel,...
        'Style', 'Text',...
        'Units', 'Normalized',...
        'Position', [0.05, 0.58, 0.35, 0.1],...
        'BackgroundColor', bckColor,...
        'Foregroundcolor', [1, 1, 1]',...
        'HorizontalAlignment', 'Left',...
        'FontSize', 14,...
        'Fontweight', 'Bold',...
        'String', 'Study Data:');
    
     uicontrol('Parent', metadataPanel,...
        'Style', 'Text',...
        'Units', 'Normalized',...
        'Position', [0.32, 0.58, 0.85, 0.1],...        
        'BackgroundColor', bckColor,...
        'Foregroundcolor', [1, 1, 1]',...
        'HorizontalAlignment', 'Left',...
        'FontSize', 14,...
        'String', '',...
        'Tag', 'textStudyDate');
    
    
     uicontrol('Parent', metadataPanel,...
        'Style', 'Text',...
        'Units', 'Normalized',...
        'Position', [0.05, 0.48, 0.37, 0.1],...        
        'BackgroundColor', bckColor,...
        'Foregroundcolor', [1, 1, 1]',...
        'HorizontalAlignment', 'Left',...
        'FontSize', 14,...
        'Fontweight', 'Bold',...
        'String', 'Slice Thickness:');
    
     uicontrol('Parent', metadataPanel,...
        'Style', 'Text',...
        'Units', 'Normalized',...
        'Position', [0.41, 0.48, 0.85, 0.1],...        
        'BackgroundColor', bckColor,...
        'Foregroundcolor', [1, 1, 1]',...
        'HorizontalAlignment', 'Left',...
        'FontSize', 14,...
        'String', '',...
        'Tag', 'textSliceThickness');
    
    
     uicontrol('Parent', metadataPanel,...
        'Style', 'Text',...
        'Units', 'Normalized',...
        'Position', [0.05, 0.40, 0.4, 0.1],...        
        'BackgroundColor', bckColor,...
        'Foregroundcolor', [1, 1, 1]',...
        'HorizontalAlignment', 'Left',...
        'FontSize', 14,...
        'Fontweight', 'Bold',...
        'String', 'Space Btw Slices:');
    
     uicontrol('Parent', metadataPanel,...
        'Style', 'Text',...
        'Units', 'Normalized',...
        'Position', [0.44, 0.40, 0.85, 0.1],...        
        'BackgroundColor', bckColor,...
        'Foregroundcolor', [1, 1, 1]',...
        'HorizontalAlignment', 'Left',...
        'FontSize', 14,...
        'String', '',...
        'Tag', 'textSpacingBetweenSlices');
    
     uicontrol('Parent', metadataPanel,...
        'Style', 'Text',...
        'Units', 'Normalized',...
        'Position', [0.05, 0.32, 0.5, 0.1],...        
        'BackgroundColor', bckColor,...
        'Foregroundcolor', [1, 1, 1]',...
        'HorizontalAlignment', 'Left',...
        'FontSize', 14,...
        'Fontweight', 'Bold',...
        'String', 'Image Dimensions:');
    
     uicontrol('Parent', metadataPanel,...
        'Style', 'Text',...
        'Units', 'Normalized',...
        'Position', [0.46, 0.32, 0.85, 0.1],...        
        'BackgroundColor', bckColor,...
        'Foregroundcolor', [1, 1, 1]',...
        'HorizontalAlignment', 'Left',...
        'FontSize', 14,...
        'String', '',...
        'Tag', 'textImageDimensions');
    
    
    uicontrol('Parent', metadataPanel,...
        'Style', 'Text',...
        'Units', 'Normalized',...
        'Position', [0.05, 0.22, 0.5, 0.1],...
        'BackgroundColor', bckColor,...
        'Foregroundcolor', [1, 1, 1]',...
        'HorizontalAlignment', 'Left',...
        'FontSize', 14,...
        'Fontweight', 'Bold',...
        'String', 'Pixel:');
    
    uicontrol('Parent', metadataPanel,...
        'Style', 'Text',...
        'Units', 'Normalized',...
        'Position', [0.2, 0.22, 0.85, 0.1],...
        'BackgroundColor', bckColor,...
        'Foregroundcolor', [1, 1, 1]',...
        'HorizontalAlignment', 'Left',...
        'FontSize', 14,...
        'String', '',...
        'Tag', 'textPixelValue');
    
        
    uicontrol('Parent', metadataPanel,...
        'Style', 'Text',...
        'Units', 'Normalized',...
        'Position', [0.05, 0.14, 0.5, 0.1],...
        'BackgroundColor', bckColor,...
        'Foregroundcolor', [1, 1, 1]',...
        'HorizontalAlignment', 'Left',...
        'FontSize', 14,...
        'Fontweight', 'Bold',...
        'String', 'Slice Location:');
    
    uicontrol('Parent', metadataPanel,...
        'Style', 'Text',...
        'Units', 'Normalized',...
        'Position', [0.38, 0.14, 0.85, 0.1],...
        'BackgroundColor', bckColor,...
        'Foregroundcolor', [1, 1, 1]',...
        'HorizontalAlignment', 'Left',...
        'FontSize', 14,...
        'String', '',...
        'Tag', 'textSliceLocation');
    
        uicontrol('Parent', metadataPanel,...
        'Style', 'Text',...
        'Units', 'Normalized',...
        'Position', [0.05, 0.06, 0.5, 0.1],...
        'BackgroundColor', bckColor,...
        'Foregroundcolor', [1, 1, 1]',...
        'HorizontalAlignment', 'Left',...
        'FontSize', 14,...
        'Fontweight', 'Bold',...
        'String', 'Voxel Volume:');
    
    uicontrol('Parent', metadataPanel,...
        'Style', 'Text',...
        'Units', 'Normalized',...
        'Position', [0.38, 0.06, 0.85, 0.1],...
        'BackgroundColor', bckColor,...
        'Foregroundcolor', [1, 1, 1]',...
        'HorizontalAlignment', 'Left',...
        'FontSize', 14,...
        'String', '',...
        'Tag', 'textVoxelVolume');
    

 end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                             CALLBACKS                                
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function flipImageOrMask(hObject, eventdata, imageOrMask)
    handles = guidata(hObject);
    
    dim.z = 3;
    dim.y = 2;
    dim.x = 1;    
    
    options = get(handles.gui.popFlipImage, 'String');
        
    currentPosition = getSlicePosition(get(handles.gui.textSliceNumber,...
        'String'), NaN);
    
    switch imageOrMask
        case 'image'            
            % Get dimension to flip.
            dimension = getfield(dim,...
                options{get(handles.gui.popFlipImage, 'Value')});            
            handles.data.imageCoreInfo.matrix = flip(...
                handles.data.imageCoreInfo.matrix, dimension);            
            showImageSlice(handles.gui.imageAxes,...
                handles.data.imageCoreInfo.matrix(:, :, currentPosition),...
                handles.data.Rmin, handles.data.Rmax);               
        otherwise  
            % Get dimension to flip.
            dimension = getfield(dim,...
                options{get(handles.gui.popFlipMask, 'Value')});
            handles.data.imageCoreInfo.masks = flip(...
                handles.data.imageCoreInfo.masks, dimension);            
    end    
    
    if get(handles.gui.showMaskCheck, 'Value')
        createMaskOverlay(handles,...
            handles.data.imageCoreInfo.masks(:, :, currentPosition))
    end
        
    guidata(hObject, handles)
end


function moveSlider(hObject, ~)
    %TODO: Check mask overlay movement with slider
    handles = guidata(hObject);
    imageMatrix = handles.data.imageCoreInfo.matrix;
    nSlices = size(imageMatrix, 3);
    
    currentSlicePosition = round(get(handles.gui.slider, 'Value'));
    
    axesChildren = get(handles.gui.imageAxes,'children');
    set(axesChildren,'cdata',...
        squeeze(imageMatrix(:, :, currentSlicePosition, :)))
    
    % TODO: Check if mask exists
    % Check show mask state
    showMaskCheckState = get(handles.gui.showMaskCheck, 'Value');
    if showMaskCheckState
        createMaskOverlay(handles,...
            handles.data.imageCoreInfo.masks(:, :, currentSlicePosition))
    end
    
    updateSliceNumberText(handles.gui.textSliceNumber,...
        currentSlicePosition, nSlices)
    
    %Refresh Slice Location information.
    updateSliceLocationText(handles.gui.textSliceLocation,...
        handles.data.imageCoreInfo.metadata, currentSlicePosition)
end

function openImage(hObject, ~)
% Import Images
handles = guidata(hObject);
if isfield(handles.data, 'lastVisitedFolder')
    rootPath = uigetdir(handles.data.lastVisitedFolder,...
        'Select a folder with Dicom images');
else
    rootPath = uigetdir('.', 'Select a folder with Dicom images');
end

if rootPath    
    try
        displayStatus(handles.gui.statusText, handles.gui.statusLight,...
            'Importing Dicoms...')
        handles.data.lastVisitedFolder = rootPath;
        handles.data.imageCoreInfo = importDicoms(rootPath);
        
        % Check if any image was found
        if ~isempty(handles.data.imageCoreInfo)
            %Calculate Window Coefficients
            [Rmin, Rmax, Win, LevV] = windowCoeffAdj...
                (handles.data.imageCoreInfo.matrix);
            handles.data.Rmin = Rmin;
            handles.data.Rmax = Rmax;
            handles.data.Win = Win;
            handles.data.LevV = LevV;
            
            % Show window width and level
            updateWindowWidthLevel(handles.gui.textWindowWL, Win, LevV)
            
            % Save imported data
            guidata(hObject, handles)
            
            % Enable controls
            set(handles.gui.importMaskButton, 'Enable', 'On')
            
            % Enable image related widgets
            set(handles.gui.buttonFlipImage, 'Enable', 'On');     
            set(handles.gui.textWindowWL, 'Visible', 'On');
            
            firstPosition = startSlider(handles.gui.slider,...
                handles.data.imageCoreInfo);
            
            %Show first Slice
            showImageSlice(handles.gui.imageAxes,...
                handles.data.imageCoreInfo.matrix(:, :, firstPosition),...
                handles.data.Rmin, handles.data.Rmax);
            
            % Show metadata on the screen
            startScreenMetadata(handles,...
                handles.data.imageCoreInfo.metadata{1},...
                firstPosition)
            
        end
    catch errorObj
        errordlg(errorObj.message, 'Import error')
    end
    
    % Set status to ready
    displayStatus(handles.gui.statusText, handles.gui.statusLight)
end
end

function openMask(hObject, ~)
    handles = guidata(hObject);
    if isfield(handles.data, 'lastVisitedFolder')
        [fileName, pathName] = uigetfile('*.hdr;*.nrrd',...
            'Select the file containing the masks',...
            handles.data.lastVisitedFolder);
    else
        [fileName, pathName] = uigetfile('*.hdr;*.nrrd',...
            'Select the file containing the masks');
    end
    
    if ~isempty(fileName)
        try
            displayStatus(handles.gui.statusText, handles.gui.statusLight,...
                'Importing masks...')
            
            rootPath = [pathName fileName];
            handles.data.imageCoreInfo.masks = importMasks(rootPath);
            handles.data.lastVisitedFolder = rootPath;
            
            % Enable show mask checkbox
            set(handles.gui.showMaskCheck, 'Enable', 'On')            
            
            % Enable image related widgets
            set(handles.gui.buttonFlipMask, 'Enable', 'On');
            
            % Save imported mask
            guidata(hObject, handles)           
            
        catch errorObj
            errordlg(errorObj.message, 'Import error');
        end
    end
    % Set status to ready!
    displayStatus(handles.gui.statusText, handles.gui.statusLight)
end

function mouseMove(hObject, ~)
    handles = guidata(hObject);
    if isfield(handles.data, 'imageCoreInfo')
        imageAxes = handles.gui.imageAxes;
        refreshPixelPositionInfo(handles, imageAxes);
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                             UTILS                                
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function updateWindowWidthLevel(textObject, Win, LevV)
    set(textObject, 'String', sprintf('WW / WL: %d / %d', Win, LevV))
end

function firstPosition = startSlider(sliderObject, imageCoreInfo)
    nSlices = size(imageCoreInfo.matrix, 3);
    firstPosition = round(nSlices / 2);
    set(sliderObject, 'Visible', 'On',...
        'Min', 1,...
        'Max', nSlices,...
        'SliderStep', [1  / (nSlices - 1) 10 / (nSlices - 1)],...
        'Value', firstPosition);
end

function showImageSlice(axisObject, imageSlice, Rmin, Rmax)
    axesChildren = get(axisObject, 'children');
    if ~isempty(axesChildren)
        set(axesChildren, 'cdata', imageSlice);  
    else
        axes(axisObject)
        imshow(imageSlice, [Rmin, Rmax])
    end
    colormap(gray)
    set(axisObject, 'XtickLabel', [])
    set(axisObject, 'YtickLabel', [])
    
end

function updateSliceNumberText(textObject, sliceNumber, nSlices)
    set(textObject, 'String', sprintf('%d / %d', sliceNumber, nSlices));
end

function updateSliceLocationText(textObject, metadata,  sliceIndex)
    if sliceIndex > 0
        metadata = metadata{sliceIndex};
    end
    if isfield(metadata, 'SliceLocation')
        set(textObject, 'String', sprintf('%.2f', metadata.SliceLocation));
    end
end

function startScreenMetadata(handles, metadata, firstPosition)
    %Show Patient Name
    updatePatientName(handles.gui.textPatientName, metadata)
    
    %
    if isfield(metadata, 'PatientAge')
        set(handles.gui.textAge, 'String',...
            metadata.PatientAge)
    end
    
    %
    if isfield(metadata, 'StudyDescription')
        set(handles.gui.textStudyDescription, 'String',...
            metadata.StudyDescription)
    end
    
    %
    if isfield(metadata, 'SeriesDescription')
        set(handles.gui.textSeriesDescription, 'String',...
            metadata.SeriesDescription)
    end
 
    %
    if isfield(metadata, 'StudyDate')
        set(handles.gui.textStudyDate, 'String',...
            formatStudyDate(metadata.StudyDate))
        
        
    end
    
    
    
    
    % Show Slice Number
    updateSliceNumberText(handles.gui.textSliceNumber, firstPosition,...
        size(handles.data.imageCoreInfo.matrix, 3))
        
    updateSliceLocationText(handles.gui.textSliceLocation,...
        metadata, -1)
        
    % Show Image Dimensions
    set(handles.gui.textImageDimensions, 'String',...
        sprintf('%d x %d', metadata.Rows,...
        metadata.Columns));
    
    if isfield(metadata, 'SpacingBetweenSlices')
        set(handles.gui.textSpacingBetweenSlices, 'String',...
            sprintf('%.2fmm', metadata.SpacingBetweenSlices));
    else
        spacingBetweenSlices = calculateSpacingBtwSlices(...
            handles.data.imageCoreInfo.metadata);        
        set(handles.gui.textSpacingBetweenSlices, 'String',...
            sprintf('%.2fmm', spacingBetweenSlices));
    end
    
    set(handles.gui.textSliceThickness, 'String',...
        sprintf('%.2fmm', metadata.SliceThickness));
    
end

function updatePatientName(textObject, metadata)
    if isfield(metadata, 'PatientName')
        if isfield(metadata.PatientName, 'FamilyName')
            patientName = metadata.PatientName.FamilyName;
        else
            patientName = metadata.PatientName;
        end
        
        if length(patientName) > 22
            patientName = [patientName(1:22), '...'];
        end
        set(textObject, 'String', patientName);
    end
end

function refreshPixelPositionInfo(handles, mainAxes)

if isfield(handles, 'data')
    C = get(mainAxes,'currentpoint');

    xlim = get(mainAxes,'xlim');
    ylim = get(mainAxes,'ylim');

    row = round(C(1));
    col = round(C(1, 2));

    %Check if pointer is inside Navigation Axes.
    outX = ~any(diff([xlim(1) C(1,1) xlim(2)])<0);
    outY = ~any(diff([ylim(1) C(1,2) ylim(2)])<0);
    if outX && outY && row && col
        %Get the current Slice
        currentSlicePositionString = get(handles.gui.textSliceNumber,...
            'String');
        tempSlicePosition = regexp(currentSlicePositionString, '/',...
            'split');
        slicePosition = str2double(tempSlicePosition(1));

        currentSlice = handles.data.imageCoreInfo.matrix(:, :,...
            slicePosition);

        pixelValue = currentSlice(col, row);

        set(handles.gui.textPixelValue, 'String',...
            sprintf('(%d, %d): %.2f', col, row, double(pixelValue)))
    else
        set(handles.gui.textPixelValue, 'String',...
            sprintf(''))
    end

end
end

function newSlicePosition = getSlicePosition(slicePositionString, direction)
    tempSlicePosition = regexp(slicePositionString, '/', 'split');
    
    if nargin == 1
        direction = NaN;
    end

    if isnan(direction)
        newSlicePosition = str2double(tempSlicePosition(1));
    elseif direction > 0
        newSlicePosition = str2double(tempSlicePosition(1)) + 1;
    else
        newSlicePosition = str2double(tempSlicePosition(1)) - 1;
    end
end

function refreshSlicePosition(hObject, eventdata)

slicePositionPlaceHolder = '%d / %d';

handles = guidata(hObject);

if ~isempty(handles.data)

    nSlices = size(handles.data.imageCoreInfo.matrix, 3);

    currentSlicePosition = get(handles.gui.textSliceNumber, 'String');

    %Get the new slice position based on the displayed values using regexp
    if isprop(eventdata, 'VerticalScrollCount')
        newSlicePosition = getSlicePosition(currentSlicePosition,...
            eventdata.VerticalScrollCount);
    else
        newSlicePosition = getSlicePosition(currentSlicePosition);
    end
       
    %Make sure that the slice number return to 1 if it is bigger than the
    %number of slices
    newSlicePosition = mod(newSlicePosition, nSlices);

    %Make sure that the slice number return to nSlices if it is smaller than the
    %number of slices
    if ~newSlicePosition && eventdata.VerticalScrollCount < 0
        newSlicePosition = nSlices;
    elseif ~newSlicePosition && eventdata.VerticalScrollCount >= 0 %%% -- INFO -- matlab has some hard time with the scroll of my laptop, in this case VerticalScrollCount == 0, it get an error latter in this function and this is error realy I need to restart matlab. I changed > to >=
        newSlicePosition = 1;
    end

    %Refresh slice position information.
    set(handles.gui.textSliceNumber, 'String',...
        sprintf(slicePositionPlaceHolder, newSlicePosition, nSlices));
  
    showImageSlice(handles.gui.imageAxes,...
       squeeze(handles.data.imageCoreInfo.matrix(:, :, newSlicePosition, :)),...
       handles.data.Rmin, handles.data.Rmax);
    

    %Refresh pixel value information.
    refreshPixelPositionInfo(handles, handles.gui.imageAxes)
    
    %Refresh Slice Location information.
   updateSliceLocationText(handles.gui.textSliceLocation,...
        handles.data.imageCoreInfo.metadata, newSlicePosition);
    
    %Refresh slider value
    set(handles.gui.slider, 'Value', newSlicePosition);

    % Check show mask state
    showMaskCheckState = get(handles.gui.showMaskCheck, 'Value');
    if showMaskCheckState
        createMaskOverlay(handles, handles.data.imageCoreInfo.masks(:, :,...
            newSlicePosition))
    end
    
    guidata(hObject, handles)
end
end

function showMask(hObject, eventdata)
    handles = guidata(hObject);
    set(handles.gui.imageAxes, 'NextPlot', 'Replace')
    showMaskCheckState = get(handles.gui.showMaskCheck, 'Value');
    
    if showMaskCheckState
        slicePositionString = get(handles.gui.textSliceNumber, 'String');
        currentSlicePosition = getSlicePosition(slicePositionString);
        mask = handles.data.imageCoreInfo.masks(:, :, currentSlicePosition);
        createMaskOverlay(handles, mask)
    else
        % Delete maskOverlay object to make navigation faster
        delete(findobj(handles.gui.imageAxes, 'Tag', 'maskOverlay'))
        refreshSlicePosition(hObject, eventdata)
    end   
end

 function createMaskOverlay(handles, mask)
    lungDim = size(mask, 1);
    mask = mask >= 1;
 
    
    overlayColor = [0 1 0];
    defaultOpacity = 0.5;

%     switch overlayColor
%         case {'y','yellow'}
%             overlayColor = [1 1 0];
%         case {'m','magenta'}
%             overlayColor = [1 0 1];
%         case {'c','cyan'}
%             overlayColor = [0 1 1];
%         case {'r','red'}
%             overlayColor = [1 0 0];
%         case {'g','green'}
%             overlayColor = [0 1 0];
%         case {'b','blue'}
%             overlayColor = [0 0 1];
%         case {'w','white'}
%             overlayColor = [1 1 1];            
%         case {'k','black'}
%             overlayColor = [0 0 0];
%     end
    
    colorMask = cat(3, overlayColor(1) * ones(lungDim),...
        overlayColor(2) * ones(lungDim),...
        overlayColor(3) * ones(lungDim));

    delete(findobj(handles.gui.imageAxes, 'Tag', 'maskOverlay'))
    hold on
    h = imshow(colorMask);
    set(h, 'AlphaData', mask * defaultOpacity, 'tag', 'maskOverlay');   
    hold off
 end

 function [Rmin, Rmax, Win, LevV] = windowCoeffAdj(Img)
    Win = double(max(Img(:)) - min(Img(:)));
    %Win (Win < 1) = 1;
    LevV = double(min(Img(:)) + (Win/2));
    [Rmin, Rmax] = WL2R(Win, LevV);
 end
 
 function [Rmn, Rmx] = WL2R(W,L)
    Rmn = L - (W/2);
    Rmx = L + (W/2);
    if (Rmn >= Rmx)
        Rmx = Rmn + 1;
    end
 end

 function formattedStudyDate = formatStudyDate(studyDate)
 formattedStudyDate = [studyDate(5:6), '-',studyDate(7:8),...
     '-', studyDate(1:4)];
 end
 
 function spacingBtwSlices = calculateSpacingBtwSlices(metadata)
    spacingBtwSlices = abs(metadata{1}.SliceLocation - metadata{2}.SliceLocation);
 end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                 LOG                           
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function displayStatus(statusText, statusLight, msg)

    if nargin == 2
        set(statusText, 'String', 'Ready!')
        set(statusLight, 'Backgroundcolor', 'g');
    else        
        set(statusText, 'String', msg)
        set(statusLight, 'Backgroundcolor', 'r');
    end
    drawnow
end